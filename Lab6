LAB-6
1.AES algorithm

from Crypto.Cipher import AES

choice = input("Choose (E)ncrypt or (D)ecrypt: ").strip().upper()
key = input("Enter 16-byte key: ").encode()

if len(key) != 16:
    print("Key must be exactly 16 bytes.")
else:
    if choice == "E":
        data = input("Enter 16-byte data to encrypt: ").encode()
        if len(data) != 16:
            print("Data must be exactly 16 bytes.")
        else:
            cipher = AES.new(key, AES.MODE_ECB)
            encrypted = cipher.encrypt(data)
            print("Encrypted (hex):", encrypted.hex())

    elif choice == "D":
        hex_data = input("Enter hex string to decrypt: ").strip()
        try:
            encrypted = bytes.fromhex(hex_data)
            cipher = AES.new(key, AES.MODE_ECB)
            decrypted = cipher.decrypt(encrypted)
            print("Decrypted (text):", decrypted.decode(errors='ignore'))
        except Exception as e:
            print("Decryption failed:", e)
    else:
        print("Invalid choice.")

2.RSA Algorithm:

import random
from math import gcd

def is_prime(n):
    if n <= 1:
        return False
    for i in range(2, int(n**0.5)+1):
        if n % i == 0:
            return False
    return True

def generate_prime(start=100, end=300):
    while True:
        p = random.randint(start, end)
        if is_prime(p):
            return p

def modinv(a, m):
    m0, x0, x1 = m, 0, 1
    while a > 1:
        q = a // m
        a, m = m, a % m
        x0, x1 = x1 - q * x0, x0
    return x1 % m0

def generate_keys():
    p = generate_prime()
    q = generate_prime()
    while q == p:
        q = generate_prime()
    n = p * q
    phi = (p - 1) * (q - 1)
    e = 65537
    while gcd(e, phi) != 1:
        e = random.randrange(2, phi)
    d = modinv(e, phi)
    return (e, n), (d, n)

def encrypt(msg, public_key):
    e, n = public_key
    return [pow(ord(char), e, n) for char in msg]

def decrypt(cipher, private_key):
    d, n = private_key
    return ''.join([chr(pow(char, d, n)) for char in cipher])

public, private = generate_keys()
message = "hello"
ciphertext = encrypt(message, public)
decrypted = decrypt(ciphertext, private)

print("Message:", message)
print("Encrypted:", ciphertext)
print("Decrypted:", decrypted)
